package main

import (
	"fmt"
	"sync"
)

type Task struct {
	ID      int
	Message string
}

func worker(id int, tasks <-chan Task, wg *sync.WaitGroup) {
	defer wg.Done()
	for task := range tasks {
		fmt.Printf("Worker %d processing task %d: %s\n", id, task.ID, task.Message)
	}
}

func main() {
	numWorkers := 3
	numTasks := 10

	var wg sync.WaitGroup
	tasks := make(chan Task)

	// Create worker pool
	for i := 1; i <= numWorkers; i++ {
		wg.Add(1)
		go worker(i, tasks, &wg)
	}

	// Dispatch tasks
	for i := 1; i <= numTasks; i++ {
		fmt.Println(i)
		tasks <- Task{ID: i, Message: fmt.Sprintf("Task %d", i)}
	}
	close(tasks) // Close the channel to signal that no more tasks will be sent

	// Wait for all workers to finish
	wg.Wait()
}
