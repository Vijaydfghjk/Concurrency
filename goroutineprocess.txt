
1. what is Goroutine?

   1.A goroutine is a function that runs concurrently.
      
   2. use the go keyword to start a goroutine.
   
   3. Channels can be used for communication between goroutines.

   When we write data in channel at the time only go routine wil execute.
   if you write without chennal the goroutine will not excute.


2. concurrency is switching the multiple task one by one.
   
   parallelism is multiple task is running at a time.


   parallelism - we can access by using go runtime package.

3. Thread?

Thread is allocating memory for goroutine.

Go runtime is responsible for allocating and managing memory for goroutines, 
and it dynamically adjusts the stack size as needed during the execution of the program. 

OS managed by Go runtime.

4.How we can allocate memory for struct ?

    By creating object.

5. How we can allocate memory for function ?

    By calling a function.
6. How many ways are there allocating memory for new?
   
    There are four ways.
    * make with slice
    * make with map
    * new
    * chan

7. var vj chan string = make(chan string) // we allocating memory for os and heap memory only.

   Goroutine depends upon channel memory 
   
   goroutine will allocate memory in stack
 
  when we write data into heap(channel) memory the goroutine will execute.


8. Select :

   The select statement allows a goroutine to wait on multiple communication operations and proceed when one of them is ready. These communication operations can include sending or receiving data on channels. If multiple operations are ready, one of them is chosen at random.

    select {

case <-c1:

    // do something when c1 is ready

case <-c2:

    // do something when c2 is ready

default:

    // do something when no channels are ready

}


9. in buffered channel - A particlular value sent to the channel can only be received once in any of the goroutine. 

   meaning : channelkku anuppapatta oru kuripitta mathippai entha oru goroutinenalum oru murai mattume pera      mutium.

10. What is unbuffered channel?

    their is no capacity 
    h := make(chan int)

   we create channel with make, it creates a unbuffered channel which essentially means that channel created cannot store any data. So any send on a channel is blocked until there is  another goroutine to receive it.


one more thing unbuffered channel is receiving channel will block untill another goroutine send the value.


1) Send on a channel is block unless there is other goroutine to ready to receive.
2) Receive is block until there is other goroutine on the other side to ready to send.


11. What is buffer channel ?

  
 a =make(chan,2) // it will store only 2 elements

  for i:=0; i<=3;i++{

       
          a <-i
   }

    for v :=range a {

         fmt.Println(v)

      }

  v will print 3 value why because there is no capacity for receiver if  recevier has one goroutine same size

  buffered channel it will block and saying need end only 2 elements. 

    buffer channel is contain capacity 

    1) Send on a buffer channel only blocks if the buffer is full
    2) Receive is only block is channel is empty

  a = make(chan , capacity)


EXAMPLE - 1  Send on a channel is blocked when the channel is full

   func main() {
    ch := make(chan int, 1)
    ch <- 1
    ch <- 1
    fmt.Println("Sending value to channnel complete")
    val := <-ch
    fmt.Printf("Receiving Value from channel finished. Value received: %d\n", val)
}


  The second sent to the channel is blocked the because buffer is full and hence it results in a deadlock situation because the program cannot proceed and that is why as you can see the output is

 fatal error: all goroutines are asleep - deadlock!



EAMPLE -2 Receive on a channel is blocked when the channel is empty

 
func main() {
    ch := make(chan int, 1)
    ch <- 1
    fmt.Println("Sending value to channnel complete")
    val := <-ch
    val = <-ch
    fmt.Printf("Receiving Value from channel finished. Value received: %d\n", val)
}

 out put error only.


   12. Why close ?

    close function is basically using for when multiple values sending to the channel 
    gorourine telling to channel there no more values to sent. and receiver come to know that.


